def OFDM_modulator1(data, Nb, N_interval, symbol_ofdm, RS, Nz):
    data = np.array(data)
    ofdm_data = np.array([])
    
    #step = 
    print("len input = ", len(data))
    count_ofdm = 0
    ofdm_indexes = [0]
    zeros_nz = np.zeros(Nz)
    print(data)
    print("Rs = ", RS)
    for i in range(0, len(data), Nb):
        arr = data[i : i + Nb]
        print(arr)
        if(len(arr) < Nb):
            #pass#arr = arr + 
            print("Добивание:", Nb - len(arr))
            arr = np.concatenate([arr, np.zeros(Nb - len(arr))])
        print("len arr = ", len(arr))
        
        ofdm = np.array([symbol_ofdm])
        ofdm = np.concatenate([zeros_nz, ofdm])
        
        for i2 in range(0, len(arr), RS):
            sub = arr[i2:i2+RS]
            print("sub = ", len(sub))
            if(len(sub) < RS):
                sub = np.concatenate([sub, np.zeros(RS - len(sub),dtype = 'complex_')])
                print("sub2 = ", len(sub))
            sub = np.concatenate([sub, np.array([symbol_ofdm])])
            ofdm = np.concatenate([ofdm, sub])
            if(i == 0 and i2 != 0):
                ofdm_indexes.append(len(ofdm_indexes) + i2)
        if(i == 0):
            ofdm_indexes.append( len(ofdm) - 1)
        ofdm = np.concatenate([ofdm, zeros_nz])
        #arr = np.concatenate([np.array([symbol_ofdm]), arr])
        
        
        
        print("len arr = ", len(arr), "len ofdm = ", len(ofdm))
        print(ofdm_indexes)
        ofdm = np.fft.ifft(ofdm)
        ofdm = np.concatenate([ofdm[len(ofdm) - N_interval:], ofdm])
        print(len(ofdm) - N_interval, ":", len(ofdm))
        print("new len(ofdm) = ", len(ofdm))
        #ofdm = np.concatenate([ofdm, np.zeros(Nb - len(arr))])
        #print(ofdm_data)
        #print("i = ", i, "len= ", len(arr))
        
        #ofdm_data = np.concatenate([ofdm_data, ofdm]) 
        count_ofdm += 1
        ofdm_data = np.concatenate([ofdm_data, ofdm])
    print("Count ofdm:", count_ofdm)
    print("len out = ", len(ofdm_data))
    argv = [ofdm_data, count_ofdm, ofdm_indexes]
    return argv
def OFDM_demodulator1(data, Nb, N_interval, symbol_ofdm, len_ofdm, count_ofdm, RS, Nz, ofdm_indexes):
    data_decode = np.array([])
    for i in range(0, len(data), int(len_ofdm)):
        print("i = ", i, "[",i + N_interval," : ", i + len_ofdm, "]" )
        
        sr = data[i + N_interval : i + int(len_ofdm) ]
        sr = np.fft.fft(sr)
        print("Удаление защитного префикса: ", Nz, ":", len(sr)-Nz, " len sr = ", len(sr))
        sr = sr[Nz:len(sr)-Nz]
        
        #data_decode.append(sr)
        new_sr = []
        i2 = 0
        for i in range(len(sr)):
            if(i != ofdm_indexes[i2]):
                #print(i)
                new_sr.append(sr[i])
            else:
                i2 += 1
        print("len new_sr = ", len(new_sr))
        sr = np.array(new_sr)
        data_decode = np.concatenate([data_decode, sr])


    return data_decode